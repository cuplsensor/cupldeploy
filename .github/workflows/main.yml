# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Derived from https://github.com/marketplace/actions/build-and-push-docker-images
  build_nginx_image:
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: false 
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
          
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Prepare tag name
        id: prep
        run: |
          TAG="cupl/cupldeploy_nginx:${GITHUB_SHA::8}"
          echo ::set-output name=tag::${TAG}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        env:
          GH_SHA8: ${GITHUB_SHA::8}
        with:
          context: ./cupldeploy_nginx
          file: ./cupldeploy_nginx/Dockerfile
          push: true
          tags: |
            cupl/cupldeploy_nginx:latest
            ${{ steps.prep.outputs.tag }}
     
  create_cluster:
    needs: [build_nginx_image]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Sets up the ec2-cli. This is needed for deploying the backend to Amazon fargate.
      - uses: marocchino/setup-ecs-cli@v1
        with:
          version: "v1.18.0"
          
      - name: Configure a cluster
        run: ecs-cli configure --cluster githubcluster --default-launch-type FARGATE --config-name ghconfig --region us-east-1
        
      - name: Configure a profile
        run: ecs-cli configure profile --access-key ${{ secrets.AWS_ACCESS_KEY_ID }} --secret-key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile-name tutorial-profile
        
      # Run a set of commands with the ec2-cli to start the cluster.
      - name: Start the cluster
        run: |
          CLIOUTPUT=$(ecs-cli up --cluster-config ghconfig --force --ecs-profile tutorial-profile)
          VPC_ID=$(echo "$CLIOUTPUT" |grep "VPC" | cut -d':' -f 2)
          SUBNET1=$(echo "$CLIOUTPUT" |grep "Subnet created" | sed -n 1p | cut -d':' -f 2)
          SUBNET2=$(echo "$CLIOUTPUT" |grep "Subnet created" | sed -n 2p | cut -d':' -f 2)
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV
          echo "SUBNET1=$SUBNET1" >> $GITHUB_ENV
          echo "SUBNET2=$SUBNET2" >> $GITHUB_ENV
          
      - name: Get the security group ID
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region us-east-1
          SGOUTPUT=$(aws ec2 describe-security-groups --filters Name=vpc-id,Values="$VPC_ID" --region us-east-1)
          SG_ID=$(echo $SGOUTPUT | python3 -c "import sys, json; print(json.load(sys.stdin)['SecurityGroups'][0]['GroupId'])")
          aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 80 --cidr 0.0.0.0/0 --region us-east-1
          echo "SG_ID=$SG_ID" >> $GITHUB_ENV
        env:
          VPC_ID: ${{env.VPC_ID}}
          
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: false
          
      # Use the docker-compose file to define a service. STEP5. https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-cli-tutorial-fargate.html
      - name: Start a service
        run: |
          envsubst < ecs-params.yml.template > ecs-params.yml
          ecs-cli compose --project-name ghproject --file docker-compose.aws.yml service up --create-log-groups --cluster-config ghconfig --ecs-profile tutorial-profile
        env:
          SUBNET1: ${{env.SUBNET1}}
          SUBNET2: ${{env.SUBNET2}}
          SG_ID: ${{env.SG_ID}}

  # This workflow contains a single job called "build"
  build:
    needs: [create_cluster]
    
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: true

      # Runs a set of commands using the runners shell. Set CI to false to stop create-react-app from erroring on warnings.
      - name: Run a multi-line script
        run: |
          cd ./cuplfrontend/reactapp
          npm install
          export REACT_APP_WSB_ORIGIN=https://b3.cupl.uk
          CI=false npm run build
          
      - uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-1'   # optional: defaults to us-east-1
          SOURCE_DIR: './cuplfrontend/reactapp/build'      # optional: defaults to entire repository

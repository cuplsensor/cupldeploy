name: CI

# Controls when the action will run. 
on:
  # Workflow is triggered by the following events.
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  distname_job:
    runs-on: ubuntu-20.04
    name: Set environment name based on the event.
    outputs:
      DISTNAME:                     ${{ steps.set_distname.outputs.DISTNAME }}
      PTR_DROPLET_USERNAME:         ${{ steps.set_pointers.outputs.PTR_DROPLET_USERNAME }}
      PTR_DROPLET_SSH_PRIVATE_KEY:  ${{ steps.set_pointers.outputs.PTR_DROPLET_SSH_PRIVATE_KEY }}
      PTR_DROPLET_HOST:             ${{ steps.set_pointers.outputs.PTR_DROPLET_HOST }}
      PTR_DB_NAME:                  ${{ steps.set_pointers.outputs.PTR_DB_NAME }}
      PTR_ADMINAPI_CLIENTSECRET:    ${{ steps.set_pointers.outputs.PTR_ADMINAPI_CLIENTSECRET }}
      PTR_TAGTOKEN_CLIENTSECRET:    ${{ steps.set_pointers.outputs.PTR_TAGTOKEN_CLIENTSECRET }}
      PTR_HASHIDS_SALT:             ${{ steps.set_pointers.outputs.PTR_HASHIDS_SALT }}
      PTR_CSRF_SESSION_KEY:         ${{ steps.set_pointers.outputs.PTR_CSRF_SESSION_KEY }}
      PTR_SECRET_KEY:               ${{ steps.set_pointers.outputs.PTR_SECRET_KEY }}
      PTR_AWS_CLOUDFRONT_DIST_ID:   ${{ steps.set_pointers.outputs.PTR_AWS_CLOUDFRONT_DIST_ID }}
      CUPLDEPLOY_SHORT_SHA1:        ${{ steps.get_hashes.outputs.CUPLDEPLOY_SHORT_SHA1 }}
      CUPLFRONTEND_SHORT_SHA1:      ${{ steps.get_hashes.outputs.CUPLFRONTEND_SHORT_SHA1 }}
      CUPLBACKEND_SHORT_SHA1:       ${{ steps.get_hashes.outputs.CUPLBACKEND_SHORT_SHA1 }}
    steps:
      - name: Set environment based on event_name.
        id: set_distname
        run: |
          if ${{ github.event_name == 'release' }}; then
              TAGNAME=${{ github.event.release.tag_name }}
              TAGNAME_PRE_DOT=$(echo "${TAGNAME%%.*}")
              echo "::set-output name=DISTNAME::$TAGNAME_PRE_DOT"
          else
              echo "::set-output name=DISTNAME::latest"
          fi
          
      - name: Define secret names based on the DISTNAME converted to uppercase.
        id: set_pointers
        run: |
          DISTNAME_UC=$(echo ${{ steps.set_distname.outputs.DISTNAME }} | tr [a-z] [A-Z])
          echo "::set-output name=PTR_DROPLET_USERNAME::${DISTNAME_UC}_DROPLET_USERNAME"
          echo "::set-output name=PTR_DROPLET_SSH_PRIVATE_KEY::${DISTNAME_UC}_DROPLET_SSH_PRIVATE_KEY"
          echo "::set-output name=PTR_DROPLET_HOST::${DISTNAME_UC}_DROPLET_HOST"
          echo "::set-output name=PTR_DB_NAME::${DISTNAME_UC}_DB_NAME"
          echo "::set-output name=PTR_ADMINAPI_CLIENTSECRET::${DISTNAME_UC}_ADMINAPI_CLIENTSECRET"
          echo "::set-output name=PTR_TAGTOKEN_CLIENTSECRET::${DISTNAME_UC}_TAGTOKEN_CLIENTSECRET"
          echo "::set-output name=PTR_HASHIDS_SALT::${DISTNAME_UC}_HASHIDS_SALT"
          echo "::set-output name=PTR_CSRF_SESSION_KEY::${DISTNAME_UC}_CSRF_SESSION_KEY"
          echo "::set-output name=PTR_SECRET_KEY::${DISTNAME_UC}_SECRET_KEY"
          echo "::set-output name=PTR_AWS_CLOUDFRONT_DIST_ID::${DISTNAME_UC}_AWS_CLOUDFRONT_DIST_ID"
          
      - name: Print a list of expected secrets.
        run: |
          echo "expecting to find secrets with these names:"
          echo ${{ steps.set_pointers.outputs.PTR_DROPLET_USERNAME }}
          echo ${{ steps.set_pointers.outputs.PTR_DROPLET_SSH_PRIVATE_KEY }}
          echo ${{ steps.set_pointers.outputs.PTR_DROPLET_HOST }}
          echo ${{ steps.set_pointers.outputs.PTR_DB_NAME }}
          echo ${{ steps.set_pointers.outputs.PTR_ADMINAPI_CLIENTSECRET }}
          echo ${{ steps.set_pointers.outputs.PTR_TAGTOKEN_CLIENTSECRET }}
          echo ${{ steps.set_pointers.outputs.PTR_HASHIDS_SALT }}
          echo ${{ steps.set_pointers.outputs.PTR_CSRF_SESSION_KEY }}
          echo ${{ steps.set_pointers.outputs.PTR_SECRET_KEY }}
          echo ${{ steps.set_pointers.outputs.PTR_AWS_CLOUDFRONT_DIST_ID }}
          
      # Check out the repository but exclude submodules
      - uses: actions/checkout@v2
        with:
          submodules: false
          
      - name: Extract short SHA-1 hashes from the submodules.
        id: get_hashes
        run: |
          CUPLDEPLOY_SHORT_SHA1=$(echo ${GITHUB_SHA} | cut -c1-7)
          CUPLFRONTEND_SHORT_SHA1=$(git ls-tree HEAD cuplfrontend | awk '{print substr($3,0,7)}')
          CUPLBACKEND_SHORT_SHA1=$(git ls-tree HEAD cuplbackend | awk '{print substr($3,0,7)}')
          if ${{ github.event_name == 'release' }}; then
              echo "::set-output name=DOCKERTAG::$CUPLBACKEND_SHORT_SHA1"
          else
              echo "::set-output name=DOCKERTAG::master"
          fi
          echo $CUPLDEPLOY_SHORT_SHA1
          echo $CUPLFRONTEND_SHORT_SHA1
          echo $CUPLBACKEND_SHORT_SHA1
          echo "::set-output name=CUPLDEPLOY_SHORT_SHA1::${CUPLDEPLOY_SHORT_SHA1}"
          echo "::set-output name=CUPLFRONTEND_SHORT_SHA1::${CUPLFRONTEND_SHORT_SHA1}"
          echo "::set-output name=CUPLBACKEND_SHORT_SHA1::${CUPLBACKEND_SHORT_SHA1}"
          
        
  backend_to_droplet:
    runs-on: ubuntu-20.04
    name: Use docker-compose over SSH to run cuplbackend on a droplet.
    needs: distname_job
    steps:      
      # Check out the repository but exclude submodules
      - uses: actions/checkout@v2
        with:
          submodules: false
          
      - name: Make a directory to store the SSH private key.
        shell: bash
        run: mkdir ~/.ssh
      
      - name: Copy in an SSH private key for communicating with the droplet. Remove carriage returns. This must be a GitHub secret.
        shell: bash
        run: echo "${{ secrets[needs.distname_job.outputs.PTR_DROPLET_SSH_PRIVATE_KEY] }}" | tr -d '\r' >> ~/.ssh/id_rsa

      - name: Add the droplet to known hosts. This helps to dodge a "not seen this host before" question when connecting with SSH.
        shell: bash
        run: ssh-keyscan -H ${{ secrets[needs.distname_job.outputs.PTR_DROPLET_HOST] }} >> ~/.ssh/known_hosts

      - name: Add a docker context for running commands on the droplet and not the local machine.
        shell: bash
        run: docker context create remote --docker "host=ssh://${{ secrets[needs.distname_job.outputs.PTR_DROPLET_USERNAME] }}@${{ secrets[needs.distname_job.outputs.PTR_DROPLET_HOST] }}"
      
      - name: Execute all future commands on the droplet by default.
        shell: bash
        run: docker context use remote
        
      - name: Remove any existing containers
        shell: bash
        run: |
          sudo rm /usr/local/bin/docker-compose
          sudo pip install docker-compose==1.27.4 
        
      - name: Pull new containers
        shell: bash
        run: docker-compose -v

      # Use the docker-compose file to define a service. STEP5. https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-cli-tutorial-fargate.html
      - name: Build and run containers on the droplet with docker-compose
        shell: bash
        run: |
          docker-compose --context remote down
          docker-compose --context remote stop
          docker-compose --context remote rm -f
          docker-compose --context remote pull 
          docker-compose --context remote up --build -d
        env:
          # Tag for the cuplbackend image.
          DOCKERTAG:             'master'
          # Randomised strings for cuplbackend.
          ADMINAPI_CLIENTSECRET: ${{ secrets[needs.distname_job.outputs.PTR_ADMINAPI_CLIENTSECRET] }}
          TAGTOKEN_CLIENTSECRET: ${{ secrets[needs.distname_job.outputs.PTR_TAGTOKEN_CLIENTSECRET] }}
          HASHIDS_SALT:          ${{ secrets[needs.distname_job.outputs.PTR_HASHIDS_SALT] }}
          CSRF_SESSION_KEY:      ${{ secrets[needs.distname_job.outputs.PTR_CSRF_SESSION_KEY] }}
          SECRET_KEY:            ${{ secrets[needs.distname_job.outputs.PTR_SECRET_KEY] }}
          # Database environment variables.
          DB_USER:               ${{ secrets.DB_USER }}
          DB_PASS:               ${{ secrets.DB_PASS }}
          DB_NAME:               ${{ secrets[needs.distname_job.outputs.PTR_DB_NAME] }}
          DB_HOST:               ${{ secrets.DB_HOST }}
          DB_PORT:               ${{ secrets.DB_PORT }}
          # Miscellaneous cuplbackend environment variables.
          SERVER_NAME:           ${{ secrets[needs.distname_job.outputs.PTR_DROPLET_HOST] }}
          DROP_ON_INIT:          'false'
          WSB_PORT:              5001 
          # Flask-Limiter environment variables.
          RATELIMIT_STORAGE_URL: 'redis://redis_r1:6379'
          RATELIMIT_STRATEGY:    'moving-window'
          RATELIMIT_ENABLED:     'false'
          RATELIMIT_DEFAULT:     ${{ secrets.RATELIMIT_DEFAULT }} 

  # This workflow contains a single job called "build"
  build:
    needs: distname_job
    name: Build the react app and copy to S3. Then update cloudfront.
    
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: true

      # Runs a set of commands using the runners shell. Set CI to false to stop create-react-app from erroring on warnings.
      - name: Run a multi-line script
        run: |
          cd ./cuplfrontend/reactapp
          npm install
          CI=false npm run build
        env: 
          REACT_APP_WSB_ORIGIN:        https://${{ secrets[needs.distname_job.outputs.PTR_DROPLET_HOST] }}
          # Information for the version page.
          REACT_APP_CUPLDEPLOY_HASH:   ${{ needs.distname_job.outputs.CUPLDEPLOY_SHORT_SHA1 }}
          REACT_APP_CUPLFRONTEND_HASH: ${{ needs.distname_job.outputs.CUPLFRONTEND_SHORT_SHA1 }}
          REACT_APP_CUPLBACKEND_HASH:  ${{ needs.distname_job.outputs.CUPLBACKEND_SHORT_SHA1 }}
          REACT_APP_CUPLDEPLOY_REPO:   https://github.com/cuplsensor/cupldeploy
          REACT_APP_CUPLFRONTEND_REPO: https://github.com/cuplsensor/cuplfrontend
          REACT_APP_CUPLBACKEND_REPO:  https://github.com/cuplsensor/cuplbackend
          REACT_APP_CUPLCODEC_REPO:    https://github.com/cuplsensor/cuplcodec
          
      - uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET:               ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID:           ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:       ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:                  'us-east-1'   # optional: defaults to us-east-1
          SOURCE_DIR:                  './cuplfrontend/reactapp/build'      # optional: defaults to entire repository
          DEST_DIR:                    ${{ needs.distname_job.outputs.DISTNAME }}
          
      - name: Invalidate the cloudfront cache so the CDN updates its edge servers from S3.
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region us-east-1
          aws cloudfront create-invalidation --distribution-id ${{ secrets[needs.distname_job.outputs.PTR_AWS_CLOUDFRONT_DIST_ID] }} --paths "/*"
          
          

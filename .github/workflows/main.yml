# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:     
  push_to_droplet:
    #needs: [build_nginx_image]
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    env: 
      CLUSTERNAME: githubcluster
      SERVICENAME: ghproject4
      REGION: us-east-1
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:          
      # Sets up the ec2-cli. This is needed for deploying the backend to Amazon fargate.
      - name: Add private key
        run: |
          mkdir ~/.ssh
          echo "${{ secrets.CUPL_DEPLOY_LATEST_KEY }}" | tr -d '\r' >> ~/.ssh/id_rsa
          
      - name: Add a docker context
        run: |
          docker context create remote --docker "host=ssh://${{ secrets.CUPL_DEPLOY_LATEST_USERNAME }}@${{ secrets.CUPL_DEPLOY_LATEST_HOST }}"
          docker context ls
          
      # Use the docker-compose file to define a service. STEP5. https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-cli-tutorial-fargate.html
      - name: Deploy with docker-compose
        run: |
          docker-compose ‐‐context remote up -d
        env:
          ADMINAPI_CLIENTSECRET: ${{ secrets.ADMINAPI_CLIENTSECRET }}
          TAGTOKEN_CLIENTSECRET: ${{ secrets.TAGTOKEN_CLIENTSECRET }}
          HASHIDS_SALT: ${{ secrets.HASHIDS_SALT }}
          CSRF_SESSION_KEY: ${{ secrets.CSRF_SESSION_KEY }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          SERVER_NAME: latest.cuplsensor.com
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_HOST: ${{ secrets.DB_HOST }}
          WSB_HOST: localhost
          WSB_PORT: 5001 
          DROP_ON_INIT: False
          RATELIMIT_STORAGE_URL: ${{ secrets.RATELIMIT_STORAGE_URL }}
          RATELIMIT_STRATEGY: ${{ secrets.RATELIMIT_STRATEGY }}
          RATELIMIT_ENABLED: ${{ secrets.RATELIMIT_ENABLED }}

  # This workflow contains a single job called "build"
  build:
    needs: [push_to_droplet]
    
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: true

      # Runs a set of commands using the runners shell. Set CI to false to stop create-react-app from erroring on warnings.
      - name: Run a multi-line script
        run: |
          cd ./cuplfrontend/reactapp
          npm install
          export REACT_APP_WSB_ORIGIN=https://b3.cupl.uk
          CI=false npm run build
          
      - uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-1'   # optional: defaults to us-east-1
          SOURCE_DIR: './cuplfrontend/reactapp/build'      # optional: defaults to entire repository
